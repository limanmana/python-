#  递归  recursion
## 引题：计算10的阶乘（1*2*3*4*5*6*7*8*9*10）

#计算5的阶乘
# 5= (1*2*3*4)*5= 4 * 5
# 4= （1*2*3）*4= 3 * 4
# 3= 2*3   2= 1*2
# 所以5 = (((1*2)*3)*4)*5
# 所以 n = (n-1)*n    n>=2
# 结论：f(n) = f(n-1) *n   n>=2

def f(n):
    if n==1:
        return 1
    return f(n-1) + n
print(f(100))

# 分析，当f（5）开始调用时
#表达式变化为 第一次函数返回值f（4）*5
#第二次（f（3）*4）*5
#第三次（（f（2）*3)*4)*5
# 第四次（（（f（1）*2）*3）*4）*5
# 第五次（（（1*2）*3)*4)*5

# 递归深度：递归需要函数调用自身，调用一次递归实际会调用多次函数，每调用一次称为深度加1，都会增加系统内存开支，所以python规定了最大的深度。
# 递归好处：个别问题用循环难以解决，递归思维教自然可以方便解决。